import React, { useEffect, useState } from 'react';
import { useParams } from 'react-router-dom';
import { Loader } from '../../components/Loader';
import { Button, Col, Descriptions, Form, Input, Row, message } from 'antd';
import { NotFoundPage } from '../../components/NotFoundPage';

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–∞—à–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤–æ–ø—Ä–æ—Å–æ–≤
import { Text_q } from './answer/text-q';
import { Num_q } from './answer/num-q';
import { List_num } from './answer/list-num';
import { Matrix_q } from './answer/matrix-q';
import { List_pars } from './answer/list-pars';
import { List_reber } from './answer/list-reber';
import { Variant_Q } from './answer/variants-q';

export const FormPage = () => {
  const [form] = Form.useForm();
  const { testId } = useParams();
  const [wasOutOfTab, setWasOutOfTab] = useState(false);
  const [tabSwitchCount, setTabSwitchCount] = useState(0); // –õ—ñ—á–∏–ª—å–Ω–∏–∫ –≤–∏—Ö–æ–¥—ñ–≤ —ñ–∑ –≤–∫–ª–∞–¥–∫–∏

  const [test, setTest] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç—ã –∏ –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
  const [formData, setFormData] = useState({
    studentName: '',
    group: '',
    answers: {},
  });

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞
  useEffect(() => {
    setIsLoading(true);
    fetch(
      `https://stradanie-production-f14d.up.railway.app/api/tests/${testId}`,
    )
      .then(res => {
        if (!res.ok) {
          throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–∞');
        }

        return res.json();
      })
      .then(data => {
        setTest(data);
        setIsLoading(false);
      })
      .catch(error => {
        // eslint-disable-next-line no-console
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–∞:', error);
        setIsLoading(false);
      });
  }, [testId]);

  // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å
  const updateAnswer = (questionId, answer) => {
    setFormData(prev => ({
      ...prev,
      answers: {
        ...prev.answers,
        [questionId]: answer,
      },
    }));
  };

  // –§—É–Ω–∫—Ü–∏—è —Ä–µ–Ω–¥–µ—Ä–∞ –Ω—É–∂–Ω–æ–≥–æ —Ç–∏–ø–∞ –≤–æ–ø—Ä–æ—Å–∞
  const renderQuestion = (question, index1) => {
    switch (question.type) {
      case 'text':
        return (
          <Text_q
            index1={index1}
            question={question}
            onChange={answer => updateAnswer(question.id, answer)}
          />
        );
      case 'number':
        return (
          <Num_q
            index1={index1}
            question={question}
            onChange={answer => updateAnswer(question.id, answer)}
          />
        );
      case 'list-num':
        return (
          <List_num
            index1={index1}
            question={question}
            onChange={answer => updateAnswer(question.id, answer)}
          />
        );
      case 'matrix':
        return (
          <Matrix_q
            index1={index1}
            question={question}
            onChange={answer => updateAnswer(question.id, answer)}
          />
        );
      case 'variants':
        return (
          <Variant_Q
            index1={index1}
            question={question}
            onChange={answer => updateAnswer(question.id, answer)}
          />
        );
      case 'list-pars':
        return (
          <List_pars
            index1={index1}
            question={question}
            onChange={answer => updateAnswer(question.id, answer)}
          />
        );
      case 'list-reber':
        return (
          <List_reber
            index1={index1}
            question={question}
            onChange={answer => updateAnswer(question.id, answer)}
          />
        );
      default:
        return null;
    }
  };

  useEffect(() => {
    message.warning(
      '‚ö†Ô∏è –ü–Ü–î –ß–ê–° –ü–†–û–•–û–î–ñ–ï–ù–ù–Ø –¢–ï–°–¢–£, –í–ê–®–Ü –î–Ü–á –ë–£–î–£–¢–¨ –í–Ü–î–°–õ–Ü–î–ö–û–í–£–í–ê–¢–ò–°–Ø!',
      10,
    );
  }, []);

  useEffect(() => {
    const logAction = action => {
      // eslint-disable-next-line no-console
      console.log(`[LOG] ${action} - ${new Date().toISOString()}`);
    };

    const enterFullScreen = () => {
      if (document.documentElement.requestFullscreen) {
        document.documentElement.requestFullscreen();
      }
    };

    const handleVisibilityChange = () => {
      if (document.hidden) {
        logAction('‚ö†Ô∏è –°—Ç—É–¥–µ–Ω—Ç –ø–µ—Ä–µ–∫–ª—é—á–∏–≤—Å—è –∑ –≤–∫–ª–∞–¥–∫–∏!');
        setWasOutOfTab(true);
        setTabSwitchCount(prevCount => prevCount + 1); // –ó–±—ñ–ª—å—à—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –≤–∏—Ö–æ–¥—ñ–≤
      } else if (wasOutOfTab) {
        message.warning('‚ö†Ô∏è –í–ê–®–Ü –î–Ü–á –ë–£–õ–ò –ó–ê–ú–Ü–ß–ï–ù–Ü –Ü –í–†–ê–•–û–í–ê–ù–Ü!');
        logAction('‚ö†Ô∏è –°—Ç—É–¥–µ–Ω—Ç –ø–æ–≤–µ—Ä–Ω—É–≤—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É!');
      }
    };

    const handleBeforeUnload = event => {
      logAction('üö® –°—Ç—É–¥–µ–Ω—Ç –Ω–∞–º–∞–≥–∞–≤—Å—è –∑–∞–∫—Ä–∏—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É!');
      event.preventDefault();
      // eslint-disable-next-line no-param-reassign
      event.returnValue = '–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –ø–æ–∫–∏–Ω—É—Ç–∏ —Ç–µ—Å—Ç?';
    };

    const preventExitFullScreen = () => {
      if (!document.fullscreenElement) {
        logAction('üö® –°—Ç—É–¥–µ–Ω—Ç –≤–∏–π—à–æ–≤ –∑ –ø–æ–≤–Ω–æ–µ–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É!');
        alert('‚ö†Ô∏è –í–ê–®–Ü –î–Ü–á –ë–£–õ–ò –ó–ê–ú–Ü–ß–ï–ù–Ü –Ü –í–†–ê–•–û–í–ê–ù–Ü!');
        enterFullScreen();
      }
    };

    document.addEventListener('visibilitychange', handleVisibilityChange);
    window.addEventListener('beforeunload', handleBeforeUnload);
    document.addEventListener('fullscreenchange', preventExitFullScreen);

    enterFullScreen();

    return () => {
      document.removeEventListener('visibilitychange', handleVisibilityChange);
      window.removeEventListener('beforeunload', handleBeforeUnload);
      document.removeEventListener('fullscreenchange', preventExitFullScreen);
    };
  }, [wasOutOfTab]);

  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã (Ant Design –≤—ã–∑—ã–≤–∞–µ—Ç –µ—ë –ø—Ä–∏ onFinish)
  const onFinish = () => {
    if (!test) {
      return;
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    const submissionData = {
      'id-test': test.id,
      'id-answer': Date.now(),
      student: formData.studentName,
      group: formData.group,
      dueTime: new Date().toISOString(),
      answers: Object.entries(formData.answers).map(([questionId, answer]) => ({
        'question-id': questionId,
        answer,
      })),
      tabSwitches: tabSwitchCount,
    };

    setIsSubmitting(true);

    fetch('https://stradanie-production-f14d.up.railway.app/submit', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(submissionData),
    })
      .then(response => {
        if (!response.ok) {
          throw new Error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
        }

        return response.json();
      })
      .then(data => {
        // eslint-disable-next-line no-console
        console.log('–ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω–æ–≤–ª—ë–Ω –∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:', data);
        message.success('–í—ñ–¥–ø–æ–≤—ñ–¥—å —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!');
        window.close(); // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —Å—Ä–∞–∑—É –∑–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ
        form.resetFields();
        // –°–±—Ä–æ—Å –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è:
        setFormData({
          studentName: '',
          group: '',
          answers: {},
        });
      })
      .catch(error => {
        // eslint-disable-next-line no-console
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error);
        message.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ!');
      })
      .finally(() => {
        setIsSubmitting(false);
      });
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–ª–µ–π Ant Design
  const onFinishFailed = errorInfo => {
    if (errorInfo.errorFields?.length) {
      const firstErrorField = errorInfo.errorFields[0].name;

      form.scrollToField(firstErrorField, {
        behavior: 'smooth',
        block: 'center',
      });
      setTimeout(() => {
        const fieldInstance = form.getFieldInstance(firstErrorField);

        if (fieldInstance?.focus) {
          fieldInstance.focus();
        }
      }, 600);
    }

    message.error('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–ø—Ä–∞–≤—Ç–µ –ø–æ–º–∏–ª–∫–∏ —É —Ñ–æ—Ä–º—ñ!');
  };

  if (isLoading) {
    return <Loader />;
  }

  if (!test) {
    return <NotFoundPage />;
  }

  return (
    <Row justify="center" style={{ padding: 10 }}>
      <Col xs={24} sm={20} md={16} lg={12} xl={10}>
        <h1>–°–∞–º–æ—Å—Ç—ñ–π–Ω–∞ —Ä–æ–±–æ—Ç–∞ ‚Ññ{test.nomer}</h1>

        <Descriptions
          style={{ marginBottom: 10 }}
          title="–ö–æ—Ä–∏—Å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è"
          bordered
          column={1}
        >
          <Descriptions.Item label="–¢–µ–º–∞ —Ä–æ–±–æ—Ç–∏">
            {test.nazwa}
          </Descriptions.Item>
          {test.additional && (
            <Descriptions.Item label="–ö–æ–º–µ–Ω—Ç–∞—Ä">
              {test.additional}
            </Descriptions.Item>
          )}
        </Descriptions>

        <Form
          form={form}
          labelCol={{ span: 4 }}
          wrapperCol={{ span: 14 }}
          layout="horizontal"
          style={{ maxWidth: 600 }}
          onFinish={onFinish}
          onFinishFailed={onFinishFailed}
          scrollToFirstError
        >
          <Form.Item
            labelCol={{ span: 9 }}
            label="–í–∞—à–µ –ø—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ —ñ–º'—è"
            name="name"
            rules={[
              {
                required: true,
                message: '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ü–Ü–ë',
              },
              {
                validator: (_, value) => {
                  if (!value) {
                    return Promise.resolve();
                  }

                  const parts = value.trim().split(/\s+/);

                  if (parts.length !== 2) {
                    return Promise.reject(
                      '–í–≤–µ–¥—ñ—Ç—å —Ç—ñ–ª—å–∫–∏ –ø—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ —ñ–º º—è (2 —Å–ª–æ–≤–∞)',
                    );
                  }

                  const fullName = parts.join(' ');

                  // –î–æ–∑–≤–æ–ª–µ–Ω–æ –ª–∏—à–µ —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ/–ª–∞—Ç–∏–Ω—Å—å–∫—ñ –ª—ñ—Ç–µ—Ä–∏ —Ç–∞ –ø—Ä–æ–±—ñ–ª–∏ –º—ñ–∂ —Å–ª–æ–≤–∞–º–∏
                  const onlyLettersRegex = /^[–ê-–Ø–∞-—è–Ñ—î–Ü—ñ–á—ó“ê“ëA-Za-z\s]+$/;

                  if (!onlyLettersRegex.test(fullName)) {
                    return Promise.reject(
                      '–ü–Ü–ë –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ –ª—ñ—Ç–µ—Ä–∏ (–±–µ–∑ —Ü–∏—Ñ—Ä —ñ —Å–∏–º–≤–æ–ª—ñ–≤)',
                    );
                  }

                  return Promise.resolve();
                },
              },
            ]}
          >
            <Input
              onChange={e =>
                setFormData(prev => ({ ...prev, studentName: e.target.value }))
              }
            />
          </Form.Item>

          <Form.Item
            label="–ì—Ä—É–ø–∞"
            name="group"
            rules={[
              { required: true, message: '–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –≥—Ä—É–ø–∏!' },
              {
                pattern: /^[–ê-–ØA-Z]{2}-\d{3}$/,
                message: '–§–æ—Ä–º–∞—Ç –≥—Ä—É–ø–∏: –ë–ë-–ß–ß–ß (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –ü–ó-221)',
              },
            ]}
          >
            <Input
              placeholder="–ü–ó-221"
              onChange={e =>
                setFormData(prev => ({ ...prev, group: e.target.value }))
              }
            />
          </Form.Item>

          {/* –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ */}
          {test.questions.map((q, index) => renderQuestion(q, index))}

          <Button
            type="primary"
            htmlType="submit"
            style={{ flex: 1, minWidth: 200 }}
            loading={isSubmitting}
          >
            –ù–∞–¥—ñ—Å–ª–∞—Ç–∏
          </Button>
        </Form>
      </Col>
    </Row>
  );
};
