/* eslint-disable no-console */
import React, { useEffect, useState, useMemo, useCallback } from 'react';
import { Link, useNavigate, useParams, Outlet } from 'react-router-dom';
import {
  Table,
  Space,
  Input,
  Button,
  Modal,
  Tooltip,
  Row,
  Col,
  message,
} from 'antd';
// eslint-disable-next-line import/no-extraneous-dependencies
import { AudioOutlined, CopyOutlined } from '@ant-design/icons';
import { handleBackButton } from '../../utils/handleBackButton';
import styles from './DetailsTask.module.scss';
import { Loader } from '../../components/Loader';

const { Search } = Input;

export const DetailsTask = () => {
  const navigate = useNavigate();
  const { taskId } = useParams();
  const [isLoading, setIsLoading] = useState(true);
  const [test, setTest] = useState(null);
  const [studentWorks, setStudentWorks] = useState([]);
  const [filteredData, setFilteredData] = useState([]);
  const [searchValue, setSearchValue] = useState('');
  const [isModalVisible, setIsModalVisible] = useState(false);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
  const formatDate = isoString => {
    if (!isoString) {
      return '';
    }

    const date = new Date(isoString);

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ –¥–ª—è –ö–∏–µ–≤–∞, —É—á–∏—Ç—ã–≤–∞—è –µ–≥–æ —Ç–µ–∫—É—â–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å.
    // –î–ª—è –ö–∏–µ–≤–∞ UTC+3 –∑–∏–º–æ–π –∏ UTC+2 –ª–µ—Ç–æ–º
    const kievOffset = 0; // –ï—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—á–∏—Ç—ã–≤–∞—Ç—å –ª–µ—Ç–Ω–µ–µ –≤—Ä–µ–º—è, –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–º–µ—â–µ–Ω–∏—è.

    date.setHours(date.getHours() + kievOffset);

    return `${String(date.getDate()).padStart(2, '0')}.${String(date.getMonth() + 1).padStart(2, '0')}.${date.getFullYear()} ${String(date.getHours()).padStart(2, '0')}:${String(date.getMinutes()).padStart(2, '0')}`;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
  const fetchData = useCallback(async () => {
    setIsLoading(true);
    try {
      const testRes = await fetch(
        `https://stradanie-production-f14d.up.railway.app/api/tests/${taskId}`,
      );
      const testData = await testRes.json();

      setTest(testData);

      const answersRes = await fetch(
        `https://stradanie-production-f14d.up.railway.app/api/answers/${taskId}`,
      );
      const answersData = await answersRes.json();
      const formattedData = answersData.map(item => ({
        ...item,
        date: formatDate(item.dueTime),
      }));

      setStudentWorks(formattedData);
      setFilteredData(formattedData);
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö:', error);
    } finally {
      setIsLoading(false);
    }
  }, [taskId]);

  useEffect(() => {
    fetchData();
  }, [fetchData]);

  // –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
  const onDelete = useCallback(
    async testId => {
      try {
        const res = await fetch(
          `https://stradanie-production-f14d.up.railway.app/api/tests/${testId}`,
          {
            method: 'DELETE',
          },
        );

        await res.json();
        message.success(`–¢–µ—Å—Ç "${test?.nazwa}" —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ!`);
        navigate('/task');
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–∞:', error);
        message.error('–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–µ—Å—Ç—É');
      }
    },
    [navigate, test],
  );

  // –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
  const columns = useMemo(
    () => [
      { title: '–°—Ç—É–¥–µ–Ω—Ç', dataIndex: 'student', key: 'student' },
      { title: '–ì—Ä—É–ø–∞', dataIndex: 'group', key: 'group' },
      { title: '–î–∞—Ç–∞', dataIndex: 'date', key: 'date' },
      { title: '–û—Ü—ñ–Ω–∫–∞', dataIndex: 'mark', key: 'mark' },
      {
        title: '–î—ñ—è',
        key: 'action',
        render: (_, record) => (
          <Space size="middle">
            <Button
              type="link"
              onClick={() =>
                navigate(`/answer/${record['id-answer']}/test/${taskId}`)
              }
            >
              –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏
            </Button>
          </Space>
        ),
      },
    ],
    [navigate, taskId],
  );

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞
  const onSearch = useCallback(
    value => {
      setSearchValue(value);
      if (!value) {
        setFilteredData(studentWorks);

        return;
      }

      const filtered = studentWorks.filter(student =>
        student.student.toLowerCase().includes(value.toLowerCase()),
      );

      setFilteredData(filtered);
    },
    [studentWorks],
  );

  // –ì–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–∏—Å–∫
  const startVoiceRecognition = useCallback(() => {
    const SpeechRecognition =
      window.SpeechRecognition || window.webkitSpeechRecognition;

    if (!SpeechRecognition) {
      alert('–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î –≥–æ–ª–æ—Å–æ–≤–∏–π –≤–≤—ñ–¥!');

      return;
    }

    const recognition = new SpeechRecognition();

    recognition.lang = 'uk-UA';
    recognition.interimResults = false;
    recognition.maxAlternatives = 1;
    recognition.onresult = event => {
      const transcript = event.results[0][0].transcript.trim();

      console.log(`üéô –†–æ–∑–ø—ñ–∑–Ω–∞–Ω–∏–π —Ç–µ–∫—Å—Ç: ${transcript}`);
      setSearchValue(transcript);
      onSearch(transcript);
    };

    recognition.onerror = event => {
      console.error('–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è:', event.error);
    };

    recognition.start();
  }, [onSearch]);

  const url = `https://serega1806bizin.github.io/kursova-robota/#/test/${taskId}`;

  const copyUrl = useCallback(async () => {
    try {
      await navigator.clipboard.writeText(url);
      message.success('–ü–æ–∫–ª–∏–∫–∞–Ω–Ω—è —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ!');
    } catch (error) {
      message.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—ñ');
    }
  }, [url]);

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏—è
  const showModal = () => setIsModalVisible(true);
  const handleOk = () => {
    onDelete(taskId);
    setIsModalVisible(false);
  };

  const handleCancel = () => setIsModalVisible(false);

  if (isLoading) {
    return <Loader />;
  }

  return (
    <>
      <Row justify="center">
        <Col xs={24} sm={20} md={16} lg={12} xl={10}>
          <div className={styles.productDetails}>
            <section className={styles.productDetails__top}>
              <div className={styles.productDetails__breadcrumbs}>
                <Link
                  to={`/${test?.type}`}
                  className={styles.productDetails__breadcrumbsHomeIcon}
                />
                <div className={styles.productDetails__breadcrumbsArrowIcon} />
                <Link
                  to={`/${test?.type}`}
                  className={styles.productDetails__breadcrumbsCategory}
                >
                  –í—Å—ñ —Ä–æ–±–æ—Ç–∏
                </Link>
                <div className={styles.productDetails__breadcrumbsArrowIcon} />
                <span className={styles.productDetails__breadcrumbsName}>
                  {test?.nazwa}
                </span>
              </div>
              <div className={styles.productDetails__back}>
                <button
                  className={styles.productDetails__backArrow}
                  onClick={handleBackButton}
                />
                <button
                  className={styles.productDetails__backText}
                  onClick={handleBackButton}
                >
                  –ù–∞–∑–∞–¥
                </button>
              </div>
              <h2 className={styles.productDetails__title}>{test?.name}</h2>
            </section>

            <div className={styles.contentWrapper}>
              <p>–ü–æ–∫–ª–∏–∫–∞–Ω–Ω—è –Ω–∞ —Ç–µ—Å—Ç:</p>
              <div className={styles.linkWrapper}>
                <Link to={`/test/${taskId}`}>{url}</Link>
                <Tooltip title="–°–∫–æ–ø—ñ—é–≤–∞—Ç–∏">
                  <CopyOutlined onClick={copyUrl} className={styles.copyIcon} />
                </Tooltip>
              </div>
              <div className={styles.buttonsWrapper} style={{ marginTop: 20 }}>
                <Space wrap>
                  <Button type="primary" danger onClick={showModal}>
                    –í–∏–¥–∞–ª–∏—Ç–∏ —Ü–µ–π —Ç–µ—Å—Ç
                  </Button>
                  <Link to={`/task/${taskId}/edit`}>
                    <Button style={{ backgroundColor: 'yellow' }}>
                      –í—ñ–¥–∫–æ—Ä–∏–≥—É–≤–∞—Ç–∏ —Ü–µ–π —Ç–µ—Å—Ç
                    </Button>
                  </Link>
                </Space>
                <Modal
                  title="–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è"
                  open={isModalVisible}
                  onOk={handleOk}
                  onCancel={handleCancel}
                  okText="–í–∏–¥–∞–ª–∏—Ç–∏"
                  cancelText="–°–∫–∞—Å—É–≤–∞—Ç–∏"
                  okButtonProps={{ danger: true }}
                >
                  <p>–í–∏ —Ç–æ—á–Ω–æ –±–∞–∂–∞—î—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü–µ–π —Ç–µ—Å—Ç?</p>
                  <p>
                    <strong>–ô–æ–≥–æ –Ω–µ –º–æ–∂–Ω–∞ –±—É–¥–µ –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏!</strong>
                  </p>
                </Modal>
              </div>

              <div style={{ marginTop: 20 }}>
                <Search
                  value={searchValue}
                  placeholder="–ü–æ—à—É–∫ —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ —ñ–º–µ–Ω—ñ"
                  enterButton="–ü–æ—à—É–∫"
                  size="large"
                  suffix={
                    <AudioOutlined
                      style={{
                        fontSize: 16,
                        color: '#1677ff',
                        cursor: 'pointer',
                      }}
                      onClick={startVoiceRecognition}
                    />
                  }
                  onChange={e => onSearch(e.target.value)}
                  onSearch={onSearch}
                />
              </div>

              <Table
                columns={columns}
                dataSource={filteredData}
                scroll={{ x: 'max-content' }}
              />
            </div>
          </div>
        </Col>
      </Row>
      <Outlet />
    </>
  );
};
